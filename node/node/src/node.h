// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest

#ifndef NODE_H
#define NODE_H

#include <ngrest/common/Service.h>
#include <iostream>
#include <stdlib.h>
#include <libvirt/libvirt.h>
#include <string>
#include <sstream>
#include <fstream>
#include <streambuf>
#include <vector>
#include <unordered_map>
#include <fstream>
#include <cstdio>
#include <memory>
#include <stdexcept>

#define K 1024
#define M (1024 * 1024)
#define G (1024 * 1024 * 1024)
#define T (1024 * 1024 * 1024 * 1024)

#define debug(X) fprintf(stderr,"%s\n", X);




//! Dummy description for the service
/*! Some detailed description of the service */
// '*location' comment sets resource path for this service
// *location: node
struct hostinformation{
int availablevcpus;
unsigned long long availablememory;
};

class node: public ngrest::Service
{
public:
    // Here is an example of service operation
    //! Dummy description for the operation
    /*! Some detailed description of the operation */
    // To invoke this operation from browser open: http://localhost:9098/node/World!
    //
    // '*location' metacomment sets path to operation relative to service operation.
    // Default value is operation name.
    // This will bind "echo" method to resource path: http://host:port/node/{text}
    // *location: /createVM
    //
    // '*method' metacomment sets HTTP method for the operation. GET is default method.
    // *method: POST
    //

    std::string createVM(const std::string& text);
    
    // *location: /createVMreq
    // *method: POST
    std::string createVMreq(int numVMs, int vcpu, int memory);
    
    // *location: /suspendVM
    // *method: POST
    std::string suspendVM(const std::string& text);
    
    // *location: /resumeVM
    // *method: POST
    std::string resumeVM(const std::string& text);
    
    // *location: /destroyVM/{text}
    // *method: DELETE
    std::string destroyVM(const std::string& text);
    
    // *location: /getavailResources
    // *method: GET
    hostinformation getavailResources();

    // *location: /getbusyResources
    // *method: GET
    hostinformation getbusyResources();

    // *location: /getResources
    // *method: GET
    hostinformation getResources();

    // *location: /migrateVMs
    // *method: POST
    std::string migrateVMs(const std::string& text);

    // *location: /destroyVMdir
    // *method: DELETE
    std::string destroyVMdir();

    // *location: /createVolume
    // *method: POST
    std::string createVolume(std::string domain, std::string cap, std::string unit);

    // *location: /getPoolList
    // *method: GET
    std::vector<std::string> getPoolList();

    // *location: /getVolumeList
    // *method: POST
    std::vector<std::string> getVolumeList(std::string pool);

    // *location: /attachVolumeToVM
    // *method: POST
    std::string attachVolumeToVM(std::string domain, std::string pool, std::string volume);

    // *location: /objectUpload
    // *method: POST
    std::string objectUpload(std::string fileName, std::string content);

    // *location: /objectDownload
    // *method: POST
    std::string objectDownload(std::string fileName);    

};


#endif // NODE_H
